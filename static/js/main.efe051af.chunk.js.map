{"version":3,"sources":["components/inputField/index.jsx","components/options/index.jsx","components/dataRenderer/index.jsx","components/multiSelect/index.jsx","App.jsx","utils/index.js","serviceWorker.js","index.js"],"names":["InputField","_ref","label","props","Object","objectWithoutProperties","react_default","a","createElement","className","htmlFor","id","Options","filters","onChangeFilters","inputField","type","onChange","min","max","value","limit","lat2","lat1","lon2","lon1","DataRenderer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","d3init","svgElement","svgElementRef","current","svg","d3","svgMainGroup","append","selectAll","data","worldGeoJson","features","enter","attr","datum","d3Geo","window","addEventListener","d3render","width","clientWidth","height","clientHeight","screenScale","Math","PI","pixelScale","projection","scale","translate","geoPathProjection","zoomTransform","computeVenuesZoomTransform","venues","style","k","remove","d","lon","lat","d3destroy","removeEventListener","React","createRef","ref","Component","length","bounds","minX","Infinity","minY","maxX","maxY","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","venue","_projection","_projection2","slicedToArray","x","y","err","return","computeVenuesBounds","dx","dy","MultiSelect","_useState","useState","_useState2","selectedOptions","setSelectedOptions","react_multi_select_default","items","options","selectedItems","newSelectedOptions","App","loading","error","categories","setData","_useState3","_useState4","setFilters","handleMainResolve","Array","from","Set","map","category","handleMainReject","useEffect","objectSpread","fetch","concat","entries","filter","entry","join","parseFilters","then","res","ok","json","statusText","catch","event","defineProperty","target","JSON","stringify","Boolean","multiSelect","selectedCategories","dataRenderer","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.efe051af.chunk.js","sourcesContent":["import React from 'react';\nimport './InputField.css';\n\nconst InputField = ({ label, ...props }) => (\n  <div className=\"input-field\">\n    {label && <label htmlFor={props.id}>{label}</label>}\n    <input {...props} />\n  </div>\n);\n\nexport default InputField;\n","import React from 'react';\nimport './Options.css';\nimport InputField from '../inputField';\n\nconst Options = ({ filters, onChangeFilters }) => (\n  <header className=\"options\">\n    <InputField\n      label=\"Maximum returned matches\"\n      type=\"number\"\n      id=\"limit\"\n      onChange={onChangeFilters}\n      min={0}\n      max={16000}\n      value={filters.limit}\n    />\n    <InputField\n      label=\"Minimum Latitude\"\n      type=\"number\"\n      id=\"lat1\"\n      onChange={onChangeFilters}\n      min={-90}\n      max={filters.lat2 - 1}\n      value={filters.lat1}\n    />\n    <InputField\n      label=\"Maximum Latitude\"\n      type=\"number\"\n      id=\"lat2\"\n      onChange={onChangeFilters}\n      min={filters.lat1 + 1}\n      max={90}\n      value={filters.lat2}\n    />\n    <InputField\n      label=\"Minimum Longitude\"\n      type=\"number\"\n      id=\"lon1\"\n      onChange={onChangeFilters}\n      min={-180}\n      max={filters.lon2 - 1}\n      value={filters.lon1}\n    />\n    <InputField\n      label=\"Maximum Longitude\"\n      type=\"number\"\n      id=\"lon2\"\n      onChange={onChangeFilters}\n      min={filters.lon1 + 1}\n      max={180}\n      value={filters.lon2}\n    />\n  </header>\n);\n\nexport default Options;\n","import React from 'react';\nimport './DataRenderer.css';\nimport * as d3 from 'd3';\nimport * as d3Geo from 'd3-geo';\nimport worldGeoJson from './world.geo.json';\n\nclass DataRenderer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.svgElementRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const svgElement = this.svgElementRef.current;\n    if (svgElement) {\n      this.d3init(svgElement);\n      this.d3render();\n    }\n  }\n\n  componentDidUpdate() {\n    if (this.svgElementRef.current) {\n      this.d3render();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.svgElementRef.current) {\n      this.d3destroy();\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"data-container\">\n        <svg width=\"100%\" height=\"100%\" ref={this.svgElementRef} />\n      </div>\n    );\n  }\n\n  d3init = () => {\n    const svgElement = this.svgElementRef.current;\n\n    const svg = d3.select(svgElement);\n    this.svg = svg;\n\n    const svgMainGroup = svg.append('g');\n    this.svgMainGroup = svgMainGroup;\n\n    svgMainGroup\n      .append('g')\n      .selectAll('path')\n      .data(worldGeoJson.features)\n      .enter()\n      .append('path')\n      .attr('class', 'd3map-region');\n\n    svgMainGroup\n      .append('path')\n      .attr('class', 'd3map-graticule')\n      .datum(d3Geo.geoGraticule());\n\n    window.addEventListener('resize', this.d3render);\n  };\n\n  d3render = () => {\n    const svgMainGroup = this.svgMainGroup;\n    if (!svgMainGroup) {\n      return;\n    }\n\n    // Get svg element size\n    const svgElement = this.svgElementRef.current;\n    const width = svgElement.clientWidth;\n    const height = svgElement.clientHeight;\n\n    // This represent the scale to apply to the regions and graticule\n    const screenScale = (Math.min(height, width) * 1.15) / Math.PI;\n\n    // This is a scale that can be multiplied to elements that have to be shown over the maps\n    const pixelScale = screenScale / 1100;\n\n    // The d3 geo projection and zooming transform\n\n    const projection = d3Geo\n      .geoEquirectangular()\n      .scale(screenScale)\n      .translate([width / 2, height / 2]);\n\n    const geoPathProjection = d3Geo.geoPath().projection(projection);\n\n    const zoomTransform = computeVenuesZoomTransform(\n      this.props.venues,\n      projection,\n      width,\n      height\n    );\n\n    svgMainGroup.style('stroke-width', 1.5 / zoomTransform.k);\n    svgMainGroup.attr('transform', zoomTransform);\n\n    // Update projection for regions and graticule\n\n    svgMainGroup.selectAll('.d3map-region').attr('d', geoPathProjection);\n    svgMainGroup.selectAll('.d3map-graticule').attr('d', geoPathProjection);\n\n    // Re-render all markers\n\n    svgMainGroup.selectAll('.d3map-marker').remove();\n\n    svgMainGroup\n      .selectAll('.d3map-marker')\n      .data(this.props.venues)\n      .enter()\n      .append('circle')\n      .attr('class', 'd3map-marker')\n      .attr('cx', function(d) {\n        return projection([d.lon, d.lat])[0];\n      })\n      .attr('cy', function(d) {\n        return projection([d.lon, d.lat])[1];\n      })\n      .attr('r', 20 * pixelScale);\n  };\n\n  d3destroy = () => {\n    window.removeEventListener('resize', this.d3render);\n    this.svg = null;\n    this.svgMainGroup = null;\n  };\n}\n\nconst computeVenuesBounds = (venues, projection) => {\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  for (const venue of venues) {\n    const [x, y] = projection([venue.lon, venue.lat]);\n    minX = Math.min(minX, x);\n    minY = Math.min(minY, y);\n    maxX = Math.max(maxX, x);\n    maxY = Math.max(maxY, y);\n  }\n  return [[minX, minY], [maxX, maxY]];\n};\n\nconst computeVenuesZoomTransform = (venues, projection, width, height) => {\n  if (venues.length > 0) {\n    const bounds = computeVenuesBounds(venues, projection);\n    const dx = bounds[1][0] - bounds[0][0];\n    const dy = bounds[1][1] - bounds[0][1];\n    const x = (bounds[0][0] + bounds[1][0]) / 2;\n    const y = (bounds[0][1] + bounds[1][1]) / 2;\n    const scale = Math.max(\n      1,\n      Math.min(8, 0.9 / Math.max(dx / width, dy / height))\n    );\n\n    return d3.zoomIdentity\n      .translate(width / 2 - scale * x, height / 2 - scale * y)\n      .scale(scale);\n  }\n  return d3.zoomIdentity;\n};\n\nexport default DataRenderer;\n","import React, { useState } from 'react';\nimport { default as BaseSelect } from '@kenshooui/react-multi-select';\nimport '@kenshooui/react-multi-select/dist/style.css';\n\nconst MultiSelect = props => {\n  const [selectedOptions, setSelectedOptions] = useState([]);\n  const handleChange = newSelectedOptions => {\n    props.onChange(newSelectedOptions);\n    setSelectedOptions(newSelectedOptions);\n  };\n\n  return (\n    <BaseSelect\n      items={props.options}\n      selectedItems={selectedOptions}\n      onChange={handleChange}\n    />\n  );\n};\n\nexport default MultiSelect;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { parseFilters } from './utils';\nimport Options from './components/options';\nimport DataRenderer from './components/dataRenderer';\nimport MultiSelect from './components/multiSelect';\n\nconst App = () => {\n  const [data, setData] = useState({\n    venues: [],\n    loading: false,\n    error: null,\n    categories: []\n  });\n  const [filters, setFilters] = useState({\n    lat1: -90,\n    lat2: 90,\n    lon1: -180,\n    lon2: 180,\n    limit: 160000\n  });\n  const handleMainResolve = ({ venues, ...rest }) => {\n    setData({\n      venues,\n      error: null,\n      loading: false,\n      categories: data.categories.length\n        ? data.categories\n        : Array.from(new Set(venues.map(venue => venue.category)))\n    });\n  };\n  const handleMainReject = error =>\n    setData({ venues: [], error, loading: false });\n  const onChangeFilters = event =>\n    setFilters({ ...filters, [event.target.id]: event.target.value });\n  const onChangeCategoryFilter = selectedCategories =>\n    setFilters({\n      ...filters,\n      category:\n        selectedCategories.length === data.categories.length\n          ? undefined\n          : selectedCategories.map(category => category.label)\n    });\n\n  useEffect(() => {\n    setData({ ...data, loading: true });\n    fetch(\n      `https://cors-anywhere.herokuapp.com/https://coinmap.org/api/v1/venues/?mode=list&${parseFilters(\n        filters\n      )}`\n    )\n      .then(res => {\n        if (!res.ok) {\n          handleMainReject(res.statusText || 'Unexpected error');\n          return [];\n        }\n        return res.json();\n      })\n      .then(handleMainResolve)\n      .catch(handleMainReject);\n    //eslint-disable-next-line\n  }, [filters]);\n\n  return (\n    <div className=\"app\">\n      <Options\n        filters={filters}\n        onChangeFilters={onChangeFilters}\n        categories={data.categories}\n      />\n      <p>{data.loading && 'Loading...'}</p>\n      {data.error && JSON.stringify(data.error)}\n      <p>\n        {data.venues &&\n          Boolean(data.venues.length) &&\n          `Found ${data.venues && data.venues.length} different venues`}\n      </p>\n      <div className=\"world-map-selector\">\n        <MultiSelect\n          options={data.categories.map((label, id) => ({ label, id }))}\n          onChange={onChangeCategoryFilter}\n        />\n        <DataRenderer venues={data.venues} />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","export const parseFilters = filters =>\n  Object.entries(filters)\n    .filter(entry => entry[1] !== undefined)\n    .map(filter => filter.join('='))\n    .join('&');\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}